@ 20230218:
    1. SVM
    2. extract behavior regime

@ Meeting on 20230207:
    1. What is a satisfactory conclusion?
        --> What the agent is doing, and how it is doing it (using dynamical systems language)
    2. Is there memory? And if so, how is it represented?
        --> "Markov" system, so "memory" must lie in the "location" in neural activity space
        --> e.g. in center of plume (constant C, y) --> collapse to fixed point?
        --> How can I increase speed for collapsing into fixed point? (Wc > Wr)
    3. (For recovery) Is the agent performing an informed biased search based on memory?

@ 20230201 AESINDY-c TTD:
    1. Make sure that AESINDY-c runs on A=0 sine wave input, and that the results are correct.
    2. See if AESINDY-c runs on A!=0 sine wave input, by slowly increasing/decreasing A.
    3. See if AESINDY-c runs on ptn simulated data, with constant input.
    4. See if AESINDY-c runs on ptn simulated data, with oscillatory input.
    5. Use PCA on SINDY-c (install pysindy)

@ 20230119 Dynamical systems analysis TTD:
    1. What are the fixed points and Jacobian of this system? (What do the eigenvectors of the connectivity matrix mean)

@ 20230118 Observations / Results:
    1. Two input projections strongly project to one of the unstable eigenvectors.

@ Meeting on 20230113:
    1. I want to be able to load (multiple) trained agents, and access their connectivity matrix.
        - What is the structure of the network?
    2. Model input (data format & loading) and output (trial visualization)
    3. The analysis that are already done:
        - Eigenvalue plot (how fast to the eigenvalues decay?)
        - Timescale
        - No fixed points (How did you determine that there are no fixed points?)
    4. How are the dynamic regimes found?
    5. Training code (if possible)
    6. Function of each script (if possible)
    7. requirements.txt?
    8. How to install pytorch-a2c-ppo-acktr-gail?
    9. README

@ Code location:
    1. Calling the eigenvalues of the network: ppo.report_arch.ipynb
    2. Loading agent: ppo.evalCli.py
    3. Create environment: ppo.a2c_ppo_acktr.envs.py
    4. Model definition: ppo.a2c_ppo_acktr.model.py
    5. sindy library: aesindy.autoencoder.sindy_library_tf